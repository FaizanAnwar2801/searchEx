// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BASIC
}

model User {
  id            String      @id @default(uuid())
  first_name    String
  last_name     String
  email         String      @unique
  passwordHash  String                                        // Optional, if using fallback pwd login
  role          UserRole    @default(BASIC)
  isActive      Boolean     @default(true)
  otps          Otp[]                                         // One-to-many with OTP for login
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Otp {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  codeHash   String                                 // OTP code, bcrypt-hashed
  expiresAt  DateTime
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model Vendor {
  id             String    @id @default(uuid())
  clientName     String
  location       String?
  servicesType   String?
  vendorName     String
  accountNumber  String?
  accessUrl      String?
  username       String?
  password       String?
  validated      Boolean   @default(false)
  validatedOn    DateTime?
  validatedBy    String?
  lastPassword   String?
  vendorContact  String?
  changedOn      DateTime?
  comments      String?
  networkDevices NetworkDevice[]     // One-to-many relationship
}

model AdminCredential {
  id               String    @id @default(uuid())
  clientName       String
  serverName       String
  username         String
  password         String
  accountType      String
  domainOrWorkgroup String
  validated        Boolean    @default(false)
  validatedOn      DateTime?
  validatedBy      String?
  lastPassword     String?
  passwordChangedOn DateTime?
  comments         String?
  networkDevice    NetworkDevice? @relation(fields: [networkDeviceId], references: [id])
  networkDeviceId  String?        // optional foreign key
}

model NetworkDevice {
  id             String    @id @default(uuid())
  clientName     String
  location       String?
  deviceType     String
  deviceName     String
  deviceModel    String?
  deviceSerial   String?
  macAddress     String?
  deviceLocation String?
  currentFirmware String?
  ipAddress      String?
  accessUrl      String?
  username       String?
  password       String?
  credsValidate  Boolean    @default(false)
  validatedOn    DateTime?
  validatedBy    String?
  comments       String?
  vendor         Vendor?    @relation(fields: [vendorId], references: [id])
  vendorId       String?    // optional FK
  adminCredentials AdminCredential[]
}
